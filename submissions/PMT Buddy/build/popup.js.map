{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://pmt-buddy/./src/js/background.js","webpack://pmt-buddy/./src/js/utils/Settings.js","webpack://pmt-buddy/./src/js/utils/BrowserStorage.js","webpack://pmt-buddy/webpack/bootstrap","webpack://pmt-buddy/webpack/runtime/compat get default export","webpack://pmt-buddy/webpack/runtime/define property getters","webpack://pmt-buddy/webpack/runtime/hasOwnProperty shorthand","webpack://pmt-buddy/./src/js/popup.js"],"sourcesContent":["\"use strict\";\r\n\r\nimport { Settings } from \"./utils/Settings\";\r\n\r\n/**\r\n * Instance with all settings.\r\n */\r\nexport const SettingsInstance = new Settings();\r\n\r\nSettingsInstance\r\n    // Physics and Maths Tutor (PMT)\r\n    .addSetting({\r\n        name: \"Clean up PDFs\",\r\n        id: \"pmt_CleanUpPdfs\",\r\n        category: \"Physics and Maths Tutor\",\r\n        defaultValue: true,\r\n        info:\r\n            \"Redirects PDFs to the original source to remove the white sidebar.\"\r\n    })\r\n    .addSetting({\r\n        name: \"Hide paid tutor content\",\r\n        id: \"pmt_BlockPmtTutor\",\r\n        category: \"Physics and Maths Tutor\",\r\n        defaultValue: false,\r\n        info: \"Hides most paid PMT Education content.\"\r\n    })\r\n    // SaveMyExams (SME)\r\n    .addSetting({\r\n        name: \"Unblock 'Revision Notes'\",\r\n        id: \"sme_unblockRevisionNotes\",\r\n        category: \"SaveMyExams\",\r\n        defaultValue: true,\r\n        info: \"View revision notes without logging in.\"\r\n    })\r\n    .addSetting({\r\n        name: \"Remove premium plan offer banners\",\r\n        id: \"sme_removePremiumPlanBanners\",\r\n        category: \"SaveMyExams\",\r\n        defaultValue: true,\r\n        info:\r\n            \"Removes the premium plan offer banners, including Black Friday sales. (currently broken)\"\r\n    })\r\n    // studocu (STUDOCU)\r\n    .addSetting({\r\n        name: \"Hide 'Premium' banners\",\r\n        id: \"studocu_HidePremiumBanners\",\r\n        category: \"studocu\",\r\n        defaultValue: true,\r\n        info:\r\n            \"Hides annoying banner on premium documents (cannot unblur pages).\"\r\n    })\r\n    .initStorage();\r\n","'use strict';\r\n\r\nimport { BrowserStorage } from \"./BrowserStorage\";\r\n\r\n/**\r\n * A handler for all things settings\r\n */\r\nexport class Settings {\r\n    constructor() {\r\n        this.settings = {};\r\n        this.categories = [];\r\n    }\r\n\r\n    /**\r\n     * Add a checkbox.\r\n     * // TODO: add javadocs\r\n     */\r\n    addSetting({\r\n        name = null,\r\n        id,\r\n        category = \"None\",\r\n        defaultValue = false,\r\n        info = \"\"\r\n    }) {\r\n        // creates the category if it doesn't exist\r\n        if (this.settings[category] === undefined) {\r\n            this.settings[category] = [];\r\n            this.categories.push(category);\r\n        }\r\n\r\n        const setting = {\r\n            name: name ?? id,\r\n            id: id,\r\n            defaultValue: defaultValue,\r\n            info: info\r\n        };\r\n\r\n        this.settings[category].push(setting);\r\n        return this;\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets all settings.\r\n     * Should only be run after all categories and settings are added.\r\n     */\r\n    getSettings() {\r\n        return this.settings\r\n    }\r\n\r\n    getCategories() {\r\n        return this.categories\r\n    }\r\n\r\n    /**\r\n     * Gets the settings HTML.\r\n     * Should only be run after all categories and settings are added.\r\n     * @returns {String} HTML\r\n     */\r\n    getHTML() {\r\n        let html = '';\r\n        this.categories.forEach(categoryName => {\r\n            html += \r\n                    '<details class=\"settings-category\">' +\r\n                    `    <summary>${categoryName}</summary>`\r\n\r\n            this.settings[categoryName].forEach(setting => {\r\n                html +=\r\n                    `    <label class=\"setting\" title=\"${setting.info}\">` +\r\n                    `        ${setting.name}` +\r\n                    `        <input type=\"checkbox\" id=\"${setting.id}\"/>` +\r\n                    '    </label>';\r\n            });\r\n            html += \r\n                    '</details>'\r\n        });\r\n\r\n        if (html === '') {\r\n            html = '<p>No settings available</p>';\r\n        }\r\n        return html;\r\n    }\r\n\r\n    /**\r\n     * Sets the setting default values to storage.\r\n     */\r\n    async initStorage() {\r\n        const storage = await BrowserStorage.getAll();\r\n        const settings = this.getSettings();\r\n        this.getCategories().forEach(categoryName => {\r\n            settings[categoryName].forEach(async setting => {\r\n                if (storage[setting.id] === undefined) {\r\n                    await BrowserStorage.set(setting.id, setting.defaultValue);\r\n                }\r\n            });\r\n        });\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Storage manager.\r\n * TODO: also use firefox's browser namespace\r\n */\r\nexport class BrowserStorage {\r\n    /**\r\n     * get a setting from storage.\r\n     * from https://stackoverflow.com/a/54261558\r\n     * @param {String} key key to get. set to null for all settings\r\n     * @returns {*} setting value, or undefined\r\n     */\r\n    static get = async key =>\r\n        new Promise((resolve, reject) =>\r\n            chrome.storage.local.get(\r\n                key,\r\n                result =>\r\n                    chrome.runtime.lastError\r\n                        ? reject(Error(chrome.runtime.lastError.message))\r\n                        : resolve(result)\r\n            )\r\n        );\r\n\r\n    /**\r\n     * set a setting to storage.\r\n     * TODO: maybe change to this https://stackoverflow.com/a/54261558\r\n     * @param {String} setting setting id\r\n     * @param {*} value new value\r\n     */\r\n    static set = async (id, value) => {\r\n        chrome.storage.local.set({ [id]: value });\r\n    };\r\n\r\n    static async getAll() {\r\n        return await this.get(null);\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","\"use strict\";\r\n\r\nimport \"../css/popup.css\";\r\nimport { SettingsInstance } from \"./background\";\r\nimport { BrowserStorage } from \"./utils/BrowserStorage\";\r\n\r\n(function() {\r\n    const initSettings = async () => {\r\n        // get settings\r\n        const storage = await BrowserStorage.getAll();\r\n\r\n        // if there's still undefined initialise the storage\r\n        // TODO: make this only check existing settings and not everything\r\n        if (Object.values(storage).some(s => s === undefined)) {\r\n            await SettingsInstance.initStorage();\r\n        }\r\n\r\n        document\r\n            .getElementsByClassName(\"settings\")[0]\r\n            .insertAdjacentHTML(\"afterbegin\", SettingsInstance.getHTML());\r\n\r\n        // get all settings options\r\n        const all = document.getElementsByClassName(\"setting\");\r\n\r\n        for (let element of all) {\r\n            // load setting state\r\n            const input = element.querySelector(\"input\");\r\n            const id = input.id;\r\n\r\n            input.checked = storage[id] === true;\r\n\r\n            // register listener\r\n            input.addEventListener(\"change\", async () => {\r\n                BrowserStorage.set(id, input.checked);\r\n            });\r\n        }\r\n    };\r\n\r\n    document.addEventListener(\"DOMContentLoaded\", initSettings);\r\n})();\r\n\r\nconsole.log(\"hello\");\r\n"],"names":["SettingsInstance","constructor","this","settings","categories","addSetting","name","id","category","defaultValue","info","undefined","push","setting","getSettings","getCategories","getHTML","html","forEach","categoryName","initStorage","storage","BrowserStorage","getAll","async","set","static","Promise","resolve","reject","chrome","local","get","key","result","runtime","lastError","Error","message","value","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","n","getter","__esModule","d","a","definition","o","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","document","addEventListener","values","some","s","getElementsByClassName","insertAdjacentHTML","all","element","input","querySelector","checked","console","log"],"sourceRoot":""}