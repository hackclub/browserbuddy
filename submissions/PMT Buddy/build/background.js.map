{"version":3,"file":"background.js","mappings":"yDAMO,MAAMA,EAOTC,WAAaC,SACT,IAAIC,SAAQ,CAACC,EAASC,IAClBC,OAAOC,QAAQC,MAAMC,IACjBC,GACAC,GACIL,OAAOM,QAAQC,UACTR,EAAOS,MAAMR,OAAOM,QAAQC,UAAUE,UACtCX,EAAQO,OAU9BV,WAAaC,MAAOc,EAAIC,KACpBX,OAAOC,QAAQC,MAAMU,IAAI,CAAE,CAACF,GAAKC,GAAQ,EAG7C,mBAAaE,GACT,aAAaC,KAAKX,IAAI,KAC1B,E,GCnCAY,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCrBAJ,EAAoBO,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIpB,KAAOoB,EACXR,EAAoBS,EAAED,EAAYpB,KAASY,EAAoBS,EAAEL,EAAShB,IAC5EsB,OAAOC,eAAeP,EAAShB,EAAK,CAAEwB,YAAY,EAAMzB,IAAKqB,EAAWpB,IAE1E,ECNDY,EAAoBS,EAAI,CAACI,EAAKC,IAAUJ,OAAOK,UAAUC,eAAeC,KAAKJ,EAAKC,G,cCOlD,ICAzB,MACH,WAAAI,GACIpB,KAAKqB,SAAW,CAAC,EACjBrB,KAAKsB,WAAa,EACtB,CAMA,UAAAC,EAAW,KACPC,EAAO,KAAI,GACX5B,EAAE,SACF6B,EAAW,OAAM,aACjBC,GAAe,EAAK,KACpBC,EAAO,UAGyBtB,IAA5BL,KAAKqB,SAASI,KACdzB,KAAKqB,SAASI,GAAY,GAC1BzB,KAAKsB,WAAWM,KAAKH,IAGzB,MAAMI,EAAU,CACZL,KAAMA,GAAQ5B,EACdA,GAAIA,EACJ8B,aAAcA,EACdC,KAAMA,GAIV,OADA3B,KAAKqB,SAASI,GAAUG,KAAKC,GACtB7B,IAEX,CAMA,WAAA8B,GACI,OAAO9B,KAAKqB,QAChB,CAEA,aAAAU,GACI,OAAO/B,KAAKsB,UAChB,CAOA,OAAAU,GACI,IAAIC,EAAO,GAoBX,OAnBAjC,KAAKsB,WAAWY,SAAQC,IACpBF,GAEQ,mDAAgBE,cAExBnC,KAAKqB,SAASc,GAAcD,SAAQL,IAChCI,GACI,qCAAqCJ,EAAQF,iBAClCE,EAAQL,0CACmBK,EAAQjC,mBAChC,IAEtBqC,GACQ,gBAGC,KAATA,IACAA,EAAO,gCAEJA,CACX,CAKA,iBAAMG,GACF,MAAMjD,QAAgBP,EAAA,EAAemB,SAC/BsB,EAAWrB,KAAK8B,cACtB9B,KAAK+B,gBAAgBG,SAAQC,IACzBd,EAASc,GAAcD,SAAQpD,eACCuB,IAAxBlB,EAAQ0C,EAAQjC,WACVhB,EAAA,EAAekB,IAAI+B,EAAQjC,GAAIiC,EAAQH,aACjD,GACF,GAEV,IDrFCH,WAAW,CACRC,KAAM,gBACN5B,GAAI,kBACJ6B,SAAU,0BACVC,cAAc,EACdC,KACI,uEAEPJ,WAAW,CACRC,KAAM,0BACN5B,GAAI,oBACJ6B,SAAU,0BACVC,cAAc,EACdC,KAAM,2CAGTJ,WAAW,CACRC,KAAM,2BACN5B,GAAI,2BACJ6B,SAAU,cACVC,cAAc,EACdC,KAAM,4CAETJ,WAAW,CACRC,KAAM,oCACN5B,GAAI,+BACJ6B,SAAU,cACVC,cAAc,EACdC,KACI,6FAGPJ,WAAW,CACRC,KAAM,yBACN5B,GAAI,6BACJ6B,SAAU,UACVC,cAAc,EACdC,KACI,sEAEPS,a","sources":["webpack://pmt-buddy/./src/js/utils/BrowserStorage.js","webpack://pmt-buddy/webpack/bootstrap","webpack://pmt-buddy/webpack/runtime/define property getters","webpack://pmt-buddy/webpack/runtime/hasOwnProperty shorthand","webpack://pmt-buddy/./src/js/background.js","webpack://pmt-buddy/./src/js/utils/Settings.js"],"sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Storage manager.\r\n * TODO: also use firefox's browser namespace\r\n */\r\nexport class BrowserStorage {\r\n    /**\r\n     * get a setting from storage.\r\n     * from https://stackoverflow.com/a/54261558\r\n     * @param {String} key key to get. set to null for all settings\r\n     * @returns {*} setting value, or undefined\r\n     */\r\n    static get = async key =>\r\n        new Promise((resolve, reject) =>\r\n            chrome.storage.local.get(\r\n                key,\r\n                result =>\r\n                    chrome.runtime.lastError\r\n                        ? reject(Error(chrome.runtime.lastError.message))\r\n                        : resolve(result)\r\n            )\r\n        );\r\n\r\n    /**\r\n     * set a setting to storage.\r\n     * TODO: maybe change to this https://stackoverflow.com/a/54261558\r\n     * @param {String} setting setting id\r\n     * @param {*} value new value\r\n     */\r\n    static set = async (id, value) => {\r\n        chrome.storage.local.set({ [id]: value });\r\n    };\r\n\r\n    static async getAll() {\r\n        return await this.get(null);\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","\"use strict\";\r\n\r\nimport { Settings } from \"./utils/Settings\";\r\n\r\n/**\r\n * Instance with all settings.\r\n */\r\nexport const SettingsInstance = new Settings();\r\n\r\nSettingsInstance\r\n    // Physics and Maths Tutor (PMT)\r\n    .addSetting({\r\n        name: \"Clean up PDFs\",\r\n        id: \"pmt_CleanUpPdfs\",\r\n        category: \"Physics and Maths Tutor\",\r\n        defaultValue: true,\r\n        info:\r\n            \"Redirects PDFs to the original source to remove the white sidebar.\"\r\n    })\r\n    .addSetting({\r\n        name: \"Hide paid tutor content\",\r\n        id: \"pmt_BlockPmtTutor\",\r\n        category: \"Physics and Maths Tutor\",\r\n        defaultValue: false,\r\n        info: \"Hides most paid PMT Education content.\"\r\n    })\r\n    // SaveMyExams (SME)\r\n    .addSetting({\r\n        name: \"Unblock 'Revision Notes'\",\r\n        id: \"sme_unblockRevisionNotes\",\r\n        category: \"SaveMyExams\",\r\n        defaultValue: true,\r\n        info: \"View revision notes without logging in.\"\r\n    })\r\n    .addSetting({\r\n        name: \"Remove premium plan offer banners\",\r\n        id: \"sme_removePremiumPlanBanners\",\r\n        category: \"SaveMyExams\",\r\n        defaultValue: true,\r\n        info:\r\n            \"Removes the premium plan offer banners, including Black Friday sales. (currently broken)\"\r\n    })\r\n    // studocu (STUDOCU)\r\n    .addSetting({\r\n        name: \"Hide 'Premium' banners\",\r\n        id: \"studocu_HidePremiumBanners\",\r\n        category: \"studocu\",\r\n        defaultValue: true,\r\n        info:\r\n            \"Hides annoying banner on premium documents (cannot unblur pages).\"\r\n    })\r\n    .initStorage();\r\n","'use strict';\r\n\r\nimport { BrowserStorage } from \"./BrowserStorage\";\r\n\r\n/**\r\n * A handler for all things settings\r\n */\r\nexport class Settings {\r\n    constructor() {\r\n        this.settings = {};\r\n        this.categories = [];\r\n    }\r\n\r\n    /**\r\n     * Add a checkbox.\r\n     * // TODO: add javadocs\r\n     */\r\n    addSetting({\r\n        name = null,\r\n        id,\r\n        category = \"None\",\r\n        defaultValue = false,\r\n        info = \"\"\r\n    }) {\r\n        // creates the category if it doesn't exist\r\n        if (this.settings[category] === undefined) {\r\n            this.settings[category] = [];\r\n            this.categories.push(category);\r\n        }\r\n\r\n        const setting = {\r\n            name: name ?? id,\r\n            id: id,\r\n            defaultValue: defaultValue,\r\n            info: info\r\n        };\r\n\r\n        this.settings[category].push(setting);\r\n        return this;\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets all settings.\r\n     * Should only be run after all categories and settings are added.\r\n     */\r\n    getSettings() {\r\n        return this.settings\r\n    }\r\n\r\n    getCategories() {\r\n        return this.categories\r\n    }\r\n\r\n    /**\r\n     * Gets the settings HTML.\r\n     * Should only be run after all categories and settings are added.\r\n     * @returns {String} HTML\r\n     */\r\n    getHTML() {\r\n        let html = '';\r\n        this.categories.forEach(categoryName => {\r\n            html += \r\n                    '<details class=\"settings-category\">' +\r\n                    `    <summary>${categoryName}</summary>`\r\n\r\n            this.settings[categoryName].forEach(setting => {\r\n                html +=\r\n                    `    <label class=\"setting\" title=\"${setting.info}\">` +\r\n                    `        ${setting.name}` +\r\n                    `        <input type=\"checkbox\" id=\"${setting.id}\"/>` +\r\n                    '    </label>';\r\n            });\r\n            html += \r\n                    '</details>'\r\n        });\r\n\r\n        if (html === '') {\r\n            html = '<p>No settings available</p>';\r\n        }\r\n        return html;\r\n    }\r\n\r\n    /**\r\n     * Sets the setting default values to storage.\r\n     */\r\n    async initStorage() {\r\n        const storage = await BrowserStorage.getAll();\r\n        const settings = this.getSettings();\r\n        this.getCategories().forEach(categoryName => {\r\n            settings[categoryName].forEach(async setting => {\r\n                if (storage[setting.id] === undefined) {\r\n                    await BrowserStorage.set(setting.id, setting.defaultValue);\r\n                }\r\n            });\r\n        });\r\n    };\r\n};\r\n"],"names":["BrowserStorage","static","async","Promise","resolve","reject","chrome","storage","local","get","key","result","runtime","lastError","Error","message","id","value","set","getAll","this","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","constructor","settings","categories","addSetting","name","category","defaultValue","info","push","setting","getSettings","getCategories","getHTML","html","forEach","categoryName","initStorage"],"sourceRoot":""}